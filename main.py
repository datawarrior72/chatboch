import os
import streamlit as st
from google import genai

# impor


# â”€â”€â”€â”€â”€â”€â”€â”€â”€ 1. RÃ©cupÃ©ration sÃ©curisÃ©e de la clÃ© API â”€â”€â”€â”€â”€â”€â”€â”€â”€
def get_api_key() -> str | None:
    """
    Recherche la clÃ© dans l'ordre de prioritÃ© suivantÂ :
    1. st.secrets["GOOGLE_API_KEY"] (fichier secrets.toml ou rÃ©glage Streamlit Cloud)
    2. Variable d'environnement GOOGLE_API_KEY
    """
    if "GOOGLE_API_KEY" in st.secrets:  # prioritÃ© 1
        return st.secrets["GOOGLE_API_KEY"]


API_KEY = get_api_key()

if not API_KEY:
    st.error(
        "ClÃ© GOOGLE_API_KEY manquante. "
        "Ajoutezâ€‘la dans st.secrets ou comme variable dâ€™environnement."
    )
    st.stop()

client = genai.Client(api_key=API_KEY)  # Client Gemini

# â”€â”€â”€â”€â”€â”€â”€â”€â”€ 2. Prompt systÃ¨me & crÃ©ation du chat â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
SYSTEM_PROMPT = (
    "Tu es un spÃ©cialiste de l'animation pour les EHPAD. "
    "Ton objectif : amÃ©liorer la motricitÃ© et le bienâ€‘Ãªtre des rÃ©sidents. "
    "Propose des activitÃ©s adaptÃ©es (PMR inclus)â€¦"
)


def init_chat():
    history = [
        {"role": "user", "parts": [{"text": SYSTEM_PROMPT}]},
        {
            "role": "model",
            "parts": [{"text": "Comprisâ€¯! Posez votre premiÃ¨re question."}],
        },
    ]
    return client.chats.create(model="gemini-2.0-flash-001", history=history)


# â”€â”€â”€â”€â”€â”€â”€â”€â”€ 3. Initialisation de lâ€™Ã©tat Streamlit â”€â”€â”€â”€â”€â”€â”€â”€â”€
if "chat" not in st.session_state:
    st.session_state.chat = init_chat()
    st.session_state.messages = [
        {
            "role": "assistant",
            "text": "Bonjourâ€¯! Comment puisâ€‘je vous aider pour lâ€™animation en EHPADâ€¯?",
        },
    ]

# â”€â”€â”€â”€â”€â”€â”€â”€â”€ 4. Affichage de lâ€™historique â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["text"])

# â”€â”€â”€â”€â”€â”€â”€â”€â”€ 5. EntrÃ©e utilisateur + streaming â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
user_input = st.chat_input("Posez votre questionâ€¦")

if user_input:
    st.session_state.messages.append({"role": "user", "text": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)

    response_stream = st.session_state.chat.send_message_stream(user_input)
    partial = ""
    with st.chat_message("assistant"):
        placeholder = st.empty()
        for chunk in response_stream:
            partial += chunk.text
            placeholder.markdown(partial + "â–Œ")
    st.session_state.messages.append({"role": "assistant", "text": partial})

# â”€â”€â”€â”€â”€â”€â”€â”€â”€ 6. RÃ©initialisation de la session â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
if st.button("ðŸ”„ RÃ©initialiser le bot"):
    st.session_state.chat = init_chat()
    st.session_state.messages = [
        {"role": "assistant", "text": "Bot rÃ©initialisÃ©. Posez une nouvelle question."},
    ]
